[{"F:\\user-demo-assignment\\src\\App.js":"1","F:\\user-demo-assignment\\src\\redux\\Reducer\\index.js":"2","F:\\user-demo-assignment\\src\\constant\\common.js":"3","F:\\user-demo-assignment\\src\\Container\\AddUser\\AddUserForm.js":"4","F:\\user-demo-assignment\\src\\utils\\axios.js":"5","F:\\user-demo-assignment\\src\\redux\\store\\index.js":"6","F:\\user-demo-assignment\\src\\Container\\UserListing\\index.js":"7","F:\\user-demo-assignment\\src\\reportWebVitals.js":"8","F:\\user-demo-assignment\\src\\Container\\AddUser\\index.js":"9","F:\\user-demo-assignment\\src\\redux\\Reducer\\User.js":"10"},{"size":381,"mtime":1611141190515,"results":"11","hashOfConfig":"12"},{"size":197,"mtime":1611136206221,"results":"13","hashOfConfig":"12"},{"size":566,"mtime":1611151815763,"results":"14","hashOfConfig":"12"},{"size":5188,"mtime":1611152073703,"results":"15","hashOfConfig":"12"},{"size":539,"mtime":1611145781476,"results":"16","hashOfConfig":"12"},{"size":131,"mtime":1611140278993,"results":"17","hashOfConfig":"12"},{"size":5619,"mtime":1611151726922,"results":"18","hashOfConfig":"12"},{"size":362,"mtime":1610962714823,"results":"19","hashOfConfig":"12"},{"size":2959,"mtime":1611151789659,"results":"20","hashOfConfig":"12"},{"size":461,"mtime":1611145433046,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"rzt1f3",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\user-demo-assignment\\src\\App.js",["45"],"import logo from './logo.svg';\nimport './App.css';\nimport { Provider } from \"react-redux\";\nimport { store } from './redux/store/index'\nimport UserPage from \"./Container/UserListing/index\";\nimport 'antd/dist/antd.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <UserPage />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\user-demo-assignment\\src\\redux\\Reducer\\index.js",[],"F:\\user-demo-assignment\\src\\constant\\common.js",[],"F:\\user-demo-assignment\\src\\Container\\AddUser\\AddUserForm.js",["46","47"],"F:\\user-demo-assignment\\src\\utils\\axios.js",[],"F:\\user-demo-assignment\\src\\redux\\store\\index.js",[],"F:\\user-demo-assignment\\src\\Container\\UserListing\\index.js",["48","49"],"import React, { useEffect, useState } from \"react\";\r\nimport UserModal from \"../AddUser/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { ADD_USER } from \"../../redux/ActionTypes\";\r\nimport { Tooltip, Modal, Table, Button } from \"antd\";\r\nimport { DeleteOutlined, EditOutlined, ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport \"./listing.css\";\r\nconst moment = require('moment')\r\nconst _ = require('lodash')\r\n\r\nconst { confirm } = Modal\r\n\r\nfunction UserListing(props) {\r\n\r\n    const { addedUsers, onUserAdd } = props\r\n\r\n    const [filter, setFilter] = useState({ page: 1, limit: 10 })\r\n    const [total, setTotal] = useState(0)\r\n    const [data, setData] = useState([])\r\n    const [editRecord, setEditRecord] = useState(undefined)\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [isModalVisible, setModalVisible] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        fetchListing()\r\n    }, [filter, addedUsers])\r\n\r\n    const fetchListing = () => {\r\n        if (addedUsers) {\r\n            let tempUserListing = _.cloneDeep(addedUsers)\r\n            setTotal(tempUserListing.length)\r\n            let tPage = (filter.page - 1) * filter.limit\r\n            let result = tempUserListing.splice(tPage, filter.limit)\r\n            result = result.sort((a, b) => {\r\n                return new Date(b.createdAt) - new Date(a.createdAt)\r\n            })\r\n            setData(result)\r\n        }\r\n\r\n    }\r\n    const showConfirm = (record) => {\r\n        confirm({\r\n            title: 'Do you Want to delete these course?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            onOk() {\r\n                handleDeleteUser(record)\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleDeleteUser = user => {\r\n        let tempUserListing = _.cloneDeep(addedUsers)\r\n        let result = tempUserListing.filter(obj => obj.id !== user.id)\r\n        setData(result)\r\n        onUserAdd(result)\r\n    }\r\n\r\n    const getColumns = () => [\r\n        {\r\n            title: 'No.',\r\n            dataIndex: 'index',\r\n            key: 'index',\r\n            render: (text, record, index) => <span>{((filter.page - 1) * filter.limit) + index}</span>\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text) => (<span style={{ wordWrap: 'break-word' }}>{text}</span>)\r\n        },\r\n        {\r\n            title: 'Birth Date',\r\n            dataIndex: 'birthDate',\r\n            key: 'birthDate',\r\n            render: (text) => (<span style={{ wordWrap: 'break-word' }}>{moment(text).format('MM/DD/YYYY')}</span>)\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address',\r\n            key: 'address',\r\n            render: (text) => (<div style={{ wordWrap: 'break-word', maxWidth: '250px' }}>{text}</div>)\r\n        },\r\n        {\r\n            title: 'College',\r\n            dataIndex: 'college',\r\n            key: 'college',\r\n            render: (text) => (<span style={{ wordWrap: 'break-word' }}>{text}</span>)\r\n        },\r\n        {\r\n            title: 'Hobbies',\r\n            dataIndex: 'hobbies',\r\n            key: 'hobbies',\r\n            render: (text) => (<span style={{ wordWrap: 'break-word' }}>{text.join(',')}</span>)\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'x',\r\n            render: (text, record) => (\r\n                <div>\r\n                    <span style={{ marginRight: '15px' }}>\r\n                        <Tooltip title=\"Delete\"><DeleteOutlined onClick={() => showConfirm(record)} /></Tooltip>\r\n                    </span>\r\n                    <Tooltip title=\"Edit\"><EditOutlined onClick={() => handleAddEditUser(true, record)} /></Tooltip>\r\n                </div>\r\n            )\r\n        }\r\n    ]\r\n\r\n    const handleAddEditUser = (action, user) => {\r\n        setModalVisible(action)\r\n        if (!action) {\r\n            if (isEdit) setIsEdit(false)\r\n\r\n            if (editRecord) setEditRecord(undefined)\r\n        }\r\n        if (user) {\r\n            setEditRecord(user)\r\n            setIsEdit(true)\r\n        }\r\n    }\r\n    const handleTableChange = (pagination, filter, sort) => {\r\n        if (pagination) {\r\n            setFilter({\r\n                ...filter,\r\n                limit: pagination.pageSize,\r\n                page: pagination.current\r\n            })\r\n        }\r\n    }\r\n\r\n    return <div className=\"container\">\r\n        <div className=\"header\">\r\n            <Button\r\n                type=\"primary\"\r\n                onClick={() => handleAddEditUser(true)}>Add User</Button>\r\n        </div>\r\n        <Table\r\n            dataSource={data}\r\n            columns={getColumns()}\r\n            pagination={{\r\n                pageSize: filter.limit,\r\n                current: filter.page,\r\n                total: total\r\n            }}\r\n            onChange={handleTableChange}\r\n            loading={loading}\r\n        />\r\n        {\r\n            isModalVisible ?\r\n                <UserModal\r\n                    isModalVisible={isModalVisible}\r\n                    handleCancel={handleAddEditUser}\r\n                    handleOk={handleAddEditUser}\r\n                    btnLoading={loading}\r\n                    record={editRecord}\r\n                    isEdit={isEdit}\r\n                /> : null\r\n        }\r\n    </div>\r\n\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    onUserAdd: data => dispatch({ type: ADD_USER, payload: data })\r\n})\r\nconst mapStateToProps = ({ users }) => {\r\n    const { addedUsers } = users\r\n    return { addedUsers }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserListing)","F:\\user-demo-assignment\\src\\reportWebVitals.js",[],"F:\\user-demo-assignment\\src\\Container\\AddUser\\index.js",["50"],"import React, { useEffect, useState } from \"react\";\r\nimport AddUserForm from \"./AddUserForm\";\r\nimport axios from \"../../utils/axios\";\r\nimport { collegeSearchApi } from \"../../constant/common\";\r\nimport { ADD_USER } from \"../../redux/ActionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nconst moment = require('moment')\r\nconst _ = require('lodash')\r\n\r\nlet searchTimeout\r\nfunction AddUserMain(props) {\r\n\r\n    const { addedUsers, onUserAdd, handleCancel, handleOk, isEdit, record } = props\r\n    const [isOtherSelected, setOtherSelected] = useState(false)\r\n    const [collegeList, setCollegeList] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (isEdit && record.otherHobbies) {\r\n            setOtherSelected(true)\r\n        }\r\n    }, [isEdit])\r\n\r\n    const handleSearch = val => {\r\n        if (searchTimeout) {\r\n            clearTimeout(searchTimeout)\r\n        }\r\n        searchTimeout = setTimeout(() => {\r\n            let { url, method } = collegeSearchApi\r\n            url = url + \"?name=\" + val\r\n            axios({ url, method }).then(({ data }) => {\r\n                data = data.splice(0, 10)\r\n                setCollegeList(data)\r\n            })\r\n        }, 600)\r\n    }\r\n    const handleHobbySelect = (hobbies) => {\r\n        if (hobbies.indexOf('Other') >= 0 && !isOtherSelected) {\r\n            setOtherSelected(true)\r\n        }\r\n        else {\r\n            setOtherSelected(false)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = values => {\r\n\r\n        if (isOtherSelected && values.otherHobbies) {\r\n            values.hobbies.splice(values.hobbies.indexOf('Other'), 1)\r\n            values.hobbies = [...values.hobbies, values.otherHobbies]\r\n        }\r\n\r\n        let tempAddedUsers = _.cloneDeep(addedUsers)\r\n        if (isEdit) {\r\n            values.createdAt = record.createdAt\r\n            tempAddedUsers = tempAddedUsers.map(obj => {\r\n                if (obj.id === record.id) {\r\n                    obj = { ...values }\r\n                }\r\n                return obj\r\n            })\r\n        } else {\r\n            values.id = uuidv4()\r\n            values.createdAt = moment().toISOString()\r\n            tempAddedUsers = [...tempAddedUsers, values]\r\n        }\r\n\r\n        localStorage.setItem('addedUsers', JSON.stringify(tempAddedUsers))\r\n        onUserAdd(tempAddedUsers)\r\n        handleCancel(false)\r\n    }\r\n    return <AddUserForm\r\n        onSearch={handleSearch}\r\n        collegeList={collegeList}\r\n        isOtherSelected={isOtherSelected}\r\n        onHobbySelect={handleHobbySelect}\r\n        onSubmit={handleSubmit}\r\n        handleCancel={handleCancel}\r\n        handleOk={handleOk}\r\n        {...props}\r\n    />\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    onUserAdd: data => dispatch({ type: ADD_USER, payload: data })\r\n})\r\nconst mapStateToProps = ({ users }) => {\r\n    const { addedUsers } = users\r\n    return { addedUsers }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUserMain)","F:\\user-demo-assignment\\src\\redux\\Reducer\\User.js",[],{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":14},{"ruleId":"51","severity":1,"message":"56","line":3,"column":87,"nodeType":"53","messageId":"54","endLine":3,"endColumn":90},{"ruleId":"51","severity":1,"message":"57","line":23,"column":21,"nodeType":"53","messageId":"54","endLine":23,"endColumn":31},{"ruleId":"58","severity":1,"message":"59","line":27,"column":8,"nodeType":"60","endLine":27,"endColumn":28,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":22,"column":8,"nodeType":"60","endLine":22,"endColumn":16,"suggestions":"63"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Row' is defined but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchListing'. Either include it or remove the dependency array.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'record.otherHobbies'. Either include it or remove the dependency array.",["65"],{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [filter, addedUsers, fetchListing]",{"range":"70","text":"71"},"Update the dependencies array to be: [isEdit, record.otherHobbies]",{"range":"72","text":"73"},[968,988],"[filter, addedUsers, fetchListing]",[773,781],"[isEdit, record.otherHobbies]"]